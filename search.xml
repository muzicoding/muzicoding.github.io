<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>组会6.28论文阅读</title>
      <link href="/2024/06/28/%E7%BB%84%E4%BC%9A%206.28%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
      <url>/2024/06/28/%E7%BB%84%E4%BC%9A%206.28%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="组会-6-28-论文阅读"><a href="#组会-6-28-论文阅读" class="headerlink" title="组会 6.28 论文阅读"></a>组会 6.28 论文阅读</h1><h2 id="FreeU-Free-Lunch-in-Diffusion-U-Net-CVPR-2024-Oral"><a href="#FreeU-Free-Lunch-in-Diffusion-U-Net-CVPR-2024-Oral" class="headerlink" title="FreeU: Free Lunch in Diffusion U-Net (CVPR 2024 Oral)"></a><em><strong>FreeU:</strong></em> <strong>Free Lunch in Diffusion U-Net</strong> (CVPR 2024 Oral)</h2><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/%E7%BB%84%E4%BC%9A6.28/Snipaste_2024-06-27_15-11-43.jpg?raw=true"></p><p>提出的FreeU方法，可以在任何代价下大大提高扩散模型样本质量：没有训练，没有引入额外的参数，没有增加内存或采样时间。</p><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>在这篇论文中，发掘了扩散U-Net尚未开发的潜力，它作为一种“免费午餐”，大大提高了生产质量。文章首先研究了U-Net架构对去噪过程的关键贡献，并确定其主干主要有助于去噪，而其跳跃连接主要将高频特征引入解码器模块，导致网络忽略了主干语义。利用这一发现，提出了一种简单而有效的方法——称为“FreeU”——它可以在不需要额外的培训或微调的情况下提高生成质量。本文的关键见解是战略性地重新加权来自U-Net的跳过连接和主干特性图的贡献，以利用U-Net体系结构中这两个组件的优势。在图像和视频生成任务上的良好结果表明，FreeU可以很容易地集成到现有的扩散模型中，如稳定扩散、梦亭、模型范围、再生器和回归器，只需几行代码就能提高生成质量。<strong>所需要的仅仅是在推理过程中调整两个比例因子。</strong></p><h3 id="去噪过程高低频变化"><a href="#去噪过程高低频变化" class="headerlink" title="去噪过程高低频变化"></a>去噪过程高低频变化</h3><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/%E7%BB%84%E4%BC%9A6.28/Snipaste_2024-06-27_16-47-26.jpg?raw=true"></p><p>去噪过程中，低频分量的逐渐调制，表现出微弱的变化速率，而其高频分量在整个去噪过程中表现出更明显的动态。</p><p>这可以直观地解释： </p><p>1)低频分量固有地体现了图像的全局结构和特征，包括全局布局和平滑的颜色。这些组件封装了构成图像本质和表示形式的基本全局元素。它的快速变化在去噪过程中通常是不合理的。对这些组件的剧烈变化可以从根本上重塑图像的本质，这一结果通常与去噪过程的目标不相容。</p><p>2)相反，高频成分包含了图像的快速变化，如边缘和纹理。这些更精细的细节对噪声明显很敏感，当噪声被引入到图像中时，通常表现为随机的高频信息。因此，去噪过程需要消除噪声，同时保持不可或缺的复杂细节。</p><h3 id="Unet是如何消除噪声的"><a href="#Unet是如何消除噪声的" class="headerlink" title="Unet是如何消除噪声的"></a>Unet是如何消除噪声的</h3><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/%E7%BB%84%E4%BC%9A6.28/Snipaste_2024-06-27_17-05-55.jpg?raw=true"></p><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/%E7%BB%84%E4%BC%9A6.28/Snipaste_2024-06-27_17-22-31.jpg?raw=true"></p><p>U-Net 的整体架构包括 Backbone，它包括 Encoder 和 Decoder，以及促进二者之间的信息传输的 Skip connection。</p><p>引入两个乘法比例因子，记为b和s，分别调制主干和跳过连接生成的特征图。如图所示，很明显，提高主干的尺度因子b明显提高了生成图像的质量。相反，比例因子s的变化，它调节横向跳跃连接的影响，似乎对生成图像的质量产生的影响可以忽略不计。b的相应增加相应地导致了由扩散模型生成的图像中的高频分量的抑制。这意味着增强主干特性可以有效地增强U-Net架构的去噪能力，从而在保真度和细节保存方面提供更好的输出。</p><p>相反，跳过连接可以将特征从早期的编码器块层直接转发到解码器。这些特征主要构成了高频信息。基于这一观察结果推测假设，在U-Net架构的训练过程中，这些高频特征的存在可能会无意中加快解码器模块内的噪声预测的收敛。此外，调制跳跃特征的有限影响也表明，跳跃特征对解码器的信息有主要贡献。这种现象可能导致在推理过程中backbone在去噪能力的效能的意外衰减。因此，这一观察结果提出了关于U-Net框架的复合去噪性能中主干和跳过连接所起的平衡作用的相关问题。</p><h3 id="FreeU"><a href="#FreeU" class="headerlink" title="FreeU"></a>FreeU</h3><p><strong>U-Net 的 Backbone 的主要贡献是去噪，而 Skip connection 将高频特征引入 Decoder 模块，使其更容易恢复输入数据</strong>。但是，在推理阶段Skip connection可能会导致Backbone 固有的去噪能力减弱了，导致异常图像细节的生成。</p><p>利用这些发现，引入了一种新的策略，称为 **”FreeU”**，可以有效地增强 U-Net 架构的去噪能力。它大大提高了生成样本的质量，而不需要额外的计算训练或者微调的开销。</p><p>对于 U-Net 解码器的第$ l $个 Block，令 $\boldsymbol{x}<em>{l}$ 表示其前一个 Block 的 Backbone 特征， $\boldsymbol{h}</em>{l} $表示通过 Skip connection 转发的特征。为了调制这些特征图，作者引入了两个标量因子：为调制 $\boldsymbol{x}<em>{l} $的 Backbone 的 scaling factor $b_l$ ，以及为调制 $\boldsymbol{h}</em>{l} $的 Skip connection 的 scaling factor $s_l$ 。具体而言， $b_l$ 旨在放大 Backbone 的特征，从而增强去噪过程；而 $s_l$ 旨在衰减 Skip connection 的特征。</p><p>对于 Backbone 特征，作者首先沿着 channel 维度计算平均特征：</p><p>$$\boldsymbol{\bar{x}}<em>{l} &#x3D; \frac{1}{C} \sum</em>{i&#x3D;1}^C \boldsymbol{x}_{l,i}$$</p><p>式中， $\boldsymbol{x}<em>{l,i} $代表特征$ \boldsymbol{x}</em>{l} $的第 i 个 channel， C 代表特征$ \boldsymbol{x}_{l}$ 的 channel 数。然后，backbone factor 计算为：</p><p>$$\boldsymbol{\alpha}<em>{l} &#x3D; (b_l - 1) \cdot \cfrac{\boldsymbol{\bar{x}}</em>{l} - Min(\boldsymbol{\bar{x}}<em>{l})}{ Max(\boldsymbol{\bar{x}}</em>{l}) - Min(\boldsymbol{\bar{x}}_{l}) } + 1 $$</p><p>式中，$ \boldsymbol{\alpha}_{l} $为 backbone factor， $b_l $是标量常数。</p><p>然后，实验中作者发现给所有的 channel 不加区别地乘以 $\boldsymbol{\alpha}<em>{l} $会在生成的合成图像中产生过度平滑的纹理。其原因是增强的 U-Net 在去噪时损害了高频细节信息。因此，作者将 scaling 操作限制在特征$ \boldsymbol{x}</em>{l} $的一半通道：</p><p>$$ \boldsymbol{x}<em>{l,i}^{‘} &#x3D; \begin{cases} \boldsymbol{x}</em>{l,i} \odot \boldsymbol{\alpha}<em>{l}, &amp; if i &lt; C&#x2F;2\ \boldsymbol{x}</em>{l,i}, &amp; otherwise \end{cases} $$</p><p>增强了 Backbone 特征的去噪能力，使其能够更有效地滤除噪声。避免了在整个特征图中全部使用 scaling factor 所带来的不利影响，从而在降噪和纹理保存之间实现更好的平衡。</p><p>为了进一步缓解由于增强去噪而导致的过度平滑纹理问题，作者进一步在傅里叶域中使用光谱调制来减少 Skip 特征的低频分量：</p><p>$$\begin{align} \boldsymbol{\mathcal{F}}(\boldsymbol{h}<em>{l,i}) &amp;&#x3D; \text{FFT}(\boldsymbol{h}</em>{l,i}) \ \boldsymbol{\mathcal{F}}’(\boldsymbol{h}<em>{l,i}) &amp;&#x3D; \boldsymbol{\mathcal{F}}(\boldsymbol{h}</em>{l,i}) \odot \boldsymbol{\beta}<em>{l,i} \ \boldsymbol{h}</em>{l,i}’ &amp;&#x3D; \text{IFFT}(\boldsymbol{\mathcal{F}}’(\boldsymbol{h}_{l,i})) \end{align}$$</p><p>式中，$ \text{FFT}(\cdot) $和$ \text{IFFT}(\cdot) $是 Fourier 和 Inverse Fourier 变换， $\boldsymbol{\beta}_{l,i} $是一个 Fourier mask，是一个 Fourier 系数，用来实现频率依赖的 $scaling factor s_l$ ：</p><p>$\begin{align} \boldsymbol{\beta}<em>{l,i}(r) &#x3D; \begin{cases} s_l &amp; \text{if } r &lt; r</em>{\text{thresh}}, \ 1 &amp; \text{otherwise}. \end{cases} \end{align}$</p><p>式中， $r $是半径，$ r_{\text{thresh}}$ 是阈值频率。然后，调制之后的 Skip 特征$ \boldsymbol{h}<em>{l}’ $再与调制之后的 Backbone 特征 $\boldsymbol{x}</em>{l}’ $Concat 在一起，输入给 U-Net 架构的后续层。</p><p>值得注意的是，所提出的 FreeU 框架不需要任何特定于任务的训练或微调。只需几行代码即可为 Backbone 和 Skip connection 添加缩放因子。本质上，架构的参数在推理阶段可以自适应地重新加权，这允许更灵活和有效的去噪操作，而无需添加任何计算负担。这使得 FreeU 成为一个高度实用的解决方案，可以无缝集成到现有的扩散模型中以提高其性能。</p><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/%E7%BB%84%E4%BC%9A6.28/Snipaste_2024-06-27_17-53-46.jpg?raw=true"></p><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/%E7%BB%84%E4%BC%9A6.28/Snipaste_2024-06-27_17-57-00.jpg?raw=true"></p><h2 id="Activating-More-Pixels-in-Image-Super-Resolution-Transformer-CVPR2023"><a href="#Activating-More-Pixels-in-Image-Super-Resolution-Transformer-CVPR2023" class="headerlink" title="Activating More Pixels in Image Super-Resolution Transformer (CVPR2023)"></a>Activating More Pixels in Image Super-Resolution Transformer (CVPR2023)</h2><h3 id="摘要-1"><a href="#摘要-1" class="headerlink" title="摘要"></a>摘要</h3><p>基于Transformer的方法在低水平的视觉任务中表现出了令人印象深刻的性能，如图像的超分辨率。然而，通过归因分析，发现这些网络只能利用有限的输入信息空间范围。这意味着Transformer的潜力在现有的网络中仍未得到充分利用。为了激活更多的输入像素以更好地重建，提出了一种新的混合注意变换器（HAT）。它结合了通道注意和基于窗口的自注意方案，从而利用了它们能够利用全局统计数据和强大的局部拟合能力的互补优势。此外，为了更好地聚合跨窗口信息，引入了一个重叠的交叉注意模块来增强相邻窗口特征之间的交互作用。在训练阶段，另外采用了同任务的训练前策略来开发模型的进一步改进的潜力。大量的实验证明了所提出的模块的有效性，并且进一步扩展了模型，以证明了该任务的性能可以大大提高。</p><h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p>采用归因分析方法LAM来检查SwinIR中用于重建的利用信息涉及的范围。发现在超分辨率方面，SwinIR并不比基于cnn的方法(例如RCAN)利用更多的输入像素，如图所示。</p><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/%E7%BB%84%E4%BC%9A6.28/Snipaste_2024-06-27_20-12-37.jpg?raw=true"></p><p>此外，尽管平均而言，SwinIR获得了更高的定量性能，但由于利用的信息范围有限，在某些样本中，它的结果不如RCAN。这些现象说明Transformer具有较强的建模本地信息的能力，但其利用信息的范围需要扩大。此外，我们还发现在SwinIR的中间特征中会出现阻塞伪影，移位窗口机制不能很好地实现跨窗口信息交互。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/%E7%BB%84%E4%BC%9A6.28/Snipaste_2024-06-27_20-20-16.jpg?raw=true"></p><p>整个网络由浅特征提取、深特征提取和图像重构三部分组成。</p><p>如图所示，整个网络由浅特征提取、深特征提取和图像重构三部分组成。对于给定的低分辨率(LR)输入，首先利用一个卷积层提取浅特征F。然后，利用一系列残差混合注意组(RHAG)和一个3 × 3卷积层进行深度特征提取。之后，添加一个全局残差连接融合浅层特征和深层特征，然后通过重构模块重构高分辨率结果。</p><p>每个RHAG包含几个混合注意块(HAB)、一个重叠的交叉注意块(OCAB)和一个带有残差连接的3 × 3卷积层。简单地使用L1损失来优化网络参数。</p><p><strong>HAB</strong>：在第一个LayerNorm (LN)层之后，与基于窗口的多头自注意(W-MSA)模块并行，将通道注意块(CAB)插入标准Swin Transformer块中。采用通道注意力时，由于涉及全局信息来计算通道关注权重，激活的像素更多。此外，许多研究表明，卷积可以帮助Transformer获得更好的视觉表示或更容易的优化，因此在标准Swin Transformer块中加入了一个基于通道注意力的卷积块，以增强网络的表示能力。</p><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/%E7%BB%84%E4%BC%9A6.28/Snipaste_2024-06-27_20-50-01.jpg?raw=true"></p><p><strong>OCAB</strong>：OCAB由重叠的交叉注意(OCA)层和MLP层组成，类似于标准的Swin Transformer模块。但是对于OCA，使用不同的窗口大小来划分投影特征。不同于WSA，它的查询、键和值都是从同一个窗口特征计算出来的, OCA从更大的空间中计算键&#x2F;值，其中可以利用更多有用的信息进行查询。</p><h3 id="实验结果-1"><a href="#实验结果-1" class="headerlink" title="实验结果"></a>实验结果</h3><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/%E7%BB%84%E4%BC%9A6.28/Snipaste_2024-06-27_20-58-40.jpg?raw=true"></p><h2 id="U-DiTs-Downsample-Tokens-in-U-Shaped-Diffusion-Transformers"><a href="#U-DiTs-Downsample-Tokens-in-U-Shaped-Diffusion-Transformers" class="headerlink" title="U-DiTs: Downsample Tokens in U-Shaped Diffusion Transformers"></a><strong>U-DiTs: Downsample Tokens in U-Shaped Diffusion</strong> <strong>Transformers</strong></h2><h2 id="摘要-2"><a href="#摘要-2" class="headerlink" title="摘要"></a>摘要</h2><p>DiTs将Transformer的体系结构引入到潜在空间图像生成的扩散任务中。通过连接一系列Transformer块的各向同性结构，DiTs显示出具有竞争力的性能和良好的可伸缩性；但与此同时，DiTs放弃U-Net及其随后的改进值得重新思考。为此进行了一个简单的实验，通过比较U-Net结构的DiT。结果表明，U-Net架构在U-Net归纳偏差中只获得了轻微的优势，这表明在U-Net风格的DiT中存在潜在的冗余。受发现U-Net主干特性是低频主导的启发，对查询键值元组执行令牌降采样以实现自注意，计算量大量减少，并带来了进一步的改进。基于降采样Token的自注意，本文中提出了一系列u型DiTs（U-DiTs），并进行了大量的实验来证明U-DiT模型的非凡性能。提出的U-DiT可以超过DiT-XL&#x2F;2，其计算成本只有1&#x2F;6。</p><h3 id="动机-1"><a href="#动机-1" class="headerlink" title="动机"></a>动机</h3><p>以 DiT 为代表的很多工作都抛弃了之前工作极其常见的 U-Net架构。U-Net 架构无论是在 Pixel Space，还是在 Latent Space中都很常用。而 DiT 中使用直筒型的架构确实是成功的，因为放大的 DiT 模型实现了最高的性能。但是，DiT 放弃了广泛使用的 U-Net 架构，及其在 Latent Space 作图像生成任务的改进激发了作者的好奇心，因为 U-Net 架构带来的归纳偏置总是被认为有利于去噪。因此，作者重新思考在规范的 U-Net 架构上面去部署 DiT 模型。</p><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/%E7%BB%84%E4%BC%9A6.28/Snipaste_2024-06-27_21-26-04.jpg?raw=true"></p><p>为了测试 U-Net 架构与 DiT 模型的结合，作者首先提出了一个朴素的 U-Net 风格的 DiT (DiT-UNet)，并将其与原始 DiT 进行比较。结果表明，在计算成本相近的情况下，DiT-UNets 仅与 DiTs 相当。从这个 toy experiment 中我们可以推断，当 U-Net 架构与 Transformer Block 简单组合时，其归纳偏置没得到充分利用。</p><p>因此，作者重新思考了 DiT-UNet 中的 Self-attention 机制。latent U-Net 去噪模型的 Backbone 架构提供了一个低频分量主导的特征。这个发现意味着 Backbone 的特征中存在冗余，即 U-Net diffuser 中的 Self-attention 应该更加突出低频分量。之前的一些理论研究提出下采样来过滤高频噪声分量，本文通过对 Self-attention 的特征执行 token 下采样来利用这种自然的低通滤波器。作者对 query，key，value 都执行了 token 下采样。如此一来，Self-attention 就是在下采样的 Latent Space 中进行了。令人惊讶的是，当作者将 Self-attention 与下采样 token 合并到 DiT-UNet 中时，Latent 扩散模型取得了更好的结果，而且计算量显著减少。</p><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/%E7%BB%84%E4%BC%9A6.28/Snipaste_2024-06-28_10-42-25.jpg?raw=true"></p><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/%E7%BB%84%E4%BC%9A6.28/Snipaste_2024-06-28_10-43-49.jpg?raw=true"></p>]]></content>
      
      
      <categories>
          
          <category> 组会 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文阅读 </tag>
            
            <tag> FreeU </tag>
            
            <tag> HAT </tag>
            
            <tag> UDIT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode日记(11)Java集合常用操作</title>
      <link href="/2024/06/19/Leetcode%E6%97%A5%E8%AE%B0(11)Java%E9%9B%86%E5%90%88%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2024/06/19/Leetcode%E6%97%A5%E8%AE%B0(11)Java%E9%9B%86%E5%90%88%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Java集合常用操作"><a href="#Java集合常用操作" class="headerlink" title="Java集合常用操作"></a>Java集合常用操作</h1><h2 id="创建一个集合"><a href="#创建一个集合" class="headerlink" title="创建一个集合"></a>创建一个集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create HashSet</span></span><br><span class="line">HashSet&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add element</span></span><br><span class="line"><span class="comment">// Time Complexity: O(1)</span></span><br><span class="line">set.add(<span class="number">10</span>);</span><br><span class="line">set.add(<span class="number">3</span>);</span><br><span class="line">set.add(<span class="number">5</span>);</span><br><span class="line">set.add(<span class="number">2</span>);</span><br><span class="line">set.add(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// [10, 3, 5, 2]</span></span><br><span class="line">System.out.println(set);</span><br></pre></td></tr></table></figure><h2 id="搜索元素"><a href="#搜索元素" class="headerlink" title="搜索元素"></a>搜索元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Search element</span></span><br><span class="line">set.contains(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Delete element</span></span><br><span class="line">set.remove(<span class="number">2</span>);</span><br><span class="line">System.out.println(set);</span><br></pre></td></tr></table></figure><h2 id="集合大小"><a href="#集合大小" class="headerlink" title="集合大小"></a>集合大小</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Size</span></span><br><span class="line">set.size();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode日记(12)集合相关题705</title>
      <link href="/2024/06/19/Leetcode%E6%97%A5%E8%AE%B0(12)%E9%9B%86%E5%90%88%E7%9B%B8%E5%85%B3%E9%A2%98705/"/>
      <url>/2024/06/19/Leetcode%E6%97%A5%E8%AE%B0(12)%E9%9B%86%E5%90%88%E7%9B%B8%E5%85%B3%E9%A2%98705/</url>
      
        <content type="html"><![CDATA[<h2 id="Leetcode705"><a href="#Leetcode705" class="headerlink" title="Leetcode705"></a>Leetcode705</h2><p><img src="https://github.com/muzicoding/Img/blob/master/leetcode%E6%97%A5%E8%AE%B0/%E9%9B%86%E5%90%88/Snipaste_2024-06-19_10-07-33.jpg?raw=true"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyHashSet</span> &#123;</span><br><span class="line">    <span class="type">boolean</span>[] hashset = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyHashSet</span><span class="params">()</span> &#123;</span><br><span class="line">        hashset = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">1000001</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        hashset[key] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        hashset[key] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hashset[key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode日记(9)Java哈希表常用操作</title>
      <link href="/2024/06/18/Leetcode%E6%97%A5%E8%AE%B0(9)Java%E5%93%88%E5%B8%8C%E8%A1%A8%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2024/06/18/Leetcode%E6%97%A5%E8%AE%B0(9)Java%E5%93%88%E5%B8%8C%E8%A1%A8%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Java哈希表常用操作"><a href="#Java哈希表常用操作" class="headerlink" title="Java哈希表常用操作"></a>Java哈希表常用操作</h1><h2 id="创建哈希表"><a href="#创建哈希表" class="headerlink" title="创建哈希表"></a>创建哈希表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create HashTable by Array</span></span><br><span class="line">String[] hashTable = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">4</span>];</span><br><span class="line"><span class="comment">// Create HashTable by HashMap lib</span></span><br><span class="line">HashMap&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add element</span></span><br><span class="line"><span class="comment">// Time Complexity: O(1)</span></span><br><span class="line">hashTable[<span class="number">1</span>] = <span class="string">&quot;hanmeimei&quot;</span>;</span><br><span class="line">hashTable[<span class="number">2</span>] = <span class="string">&quot;lihua&quot;</span>;</span><br><span class="line">hashTable[<span class="number">3</span>] = <span class="string">&quot;siyangyuan&quot;</span>;</span><br><span class="line">map.put(<span class="number">1</span>, <span class="string">&quot;hanmeimei&quot;</span>);</span><br><span class="line">map.put(<span class="number">2</span>, <span class="string">&quot;lihua&quot;</span>);</span><br><span class="line">map.put(<span class="number">3</span>, <span class="string">&quot;siyangyuan&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="更新元素"><a href="#更新元素" class="headerlink" title="更新元素"></a>更新元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Update element</span></span><br><span class="line"><span class="comment">// Time Complexity: O(1)</span></span><br><span class="line">hashTable[<span class="number">1</span>] = <span class="string">&quot;bishi&quot;</span>;</span><br><span class="line">map.put(<span class="number">1</span>, <span class="string">&quot;bishi&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Remove element</span></span><br><span class="line"><span class="comment">// Time Complexity: O(1)</span></span><br><span class="line">hashTable[<span class="number">1</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">map.remove(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get Value</span></span><br><span class="line"><span class="comment">// Time Complexity: O(1)</span></span><br><span class="line"><span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> hashTable[<span class="number">3</span>];</span><br><span class="line">map.get(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h2 id="检查key是否存在"><a href="#检查key是否存在" class="headerlink" title="检查key是否存在"></a>检查key是否存在</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Check key</span></span><br><span class="line"><span class="comment">// Time Complexity: O(1)</span></span><br><span class="line"><span class="comment">// hashTable check the length</span></span><br><span class="line">map.containsKey(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h2 id="长度-是否还有元素"><a href="#长度-是否还有元素" class="headerlink" title="长度 是否还有元素"></a>长度 是否还有元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Length</span></span><br><span class="line"><span class="comment">// Time Complexity: O(1)</span></span><br><span class="line"><span class="comment">// hashTable Size variables</span></span><br><span class="line">map.size();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is Empty?</span></span><br><span class="line"><span class="comment">// Time Complexity: O(1)</span></span><br><span class="line">map.isEmpty();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode日记(8)栈相关题20_496</title>
      <link href="/2024/06/17/Leetcode%E6%97%A5%E8%AE%B0(8)%E6%A0%88%E7%9B%B8%E5%85%B3%E9%A2%9820_496/"/>
      <url>/2024/06/17/Leetcode%E6%97%A5%E8%AE%B0(8)%E6%A0%88%E7%9B%B8%E5%85%B3%E9%A2%9820_496/</url>
      
        <content type="html"><![CDATA[<h2 id="Leetcode20"><a href="#Leetcode20" class="headerlink" title="Leetcode20"></a>Leetcode20</h2><p><img src="https://github.com/muzicoding/Img/blob/master/leetcode%E6%97%A5%E8%AE%B0/%E6%A0%88/Snipaste_2024-06-17_10-55-11.jpg?raw=true"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span> || c == <span class="string">&#x27;[&#x27;</span> || c == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">                stack.push(c);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                    <span class="keyword">if</span> (c == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (temp != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;]&#x27;</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (temp != <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c ==<span class="string">&#x27;&#125;&#x27;</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (temp != <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Leetcode496"><a href="#Leetcode496" class="headerlink" title="Leetcode496"></a>Leetcode496</h2><p><img src="https://github.com/muzicoding/Img/blob/master/leetcode%E6%97%A5%E8%AE%B0/%E6%A0%88/Snipaste_2024-06-17_10-57-06.jpg?raw=true"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] nextGreaterElement(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[nums1.length];</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums2) &#123;</span><br><span class="line">            stack.push(num);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums1.length; i++) &#123;</span><br><span class="line">            Stack&lt;Integer&gt; temp = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isFound</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> nums1[i];</span><br><span class="line">            <span class="keyword">while</span> (stack.size() !=<span class="number">0</span> &amp;&amp; !isFound) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                <span class="keyword">if</span> (top &gt; num) &#123;</span><br><span class="line">                    max = top;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (top == num) &#123;</span><br><span class="line">                    isFound = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                temp.push(top);</span><br><span class="line">            &#125;</span><br><span class="line">            res[i] = max;</span><br><span class="line">            <span class="keyword">while</span> (temp.size() != <span class="number">0</span>) &#123;</span><br><span class="line">                stack.push(temp.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode日记(10)哈希表相关题217_389_496</title>
      <link href="/2024/06/17/Leetcode%E6%97%A5%E8%AE%B0(10)%E5%93%88%E5%B8%8C%E8%A1%A8%E7%9B%B8%E5%85%B3%E9%A2%98217_389_496/"/>
      <url>/2024/06/17/Leetcode%E6%97%A5%E8%AE%B0(10)%E5%93%88%E5%B8%8C%E8%A1%A8%E7%9B%B8%E5%85%B3%E9%A2%98217_389_496/</url>
      
        <content type="html"><![CDATA[<h2 id="Leetcode217"><a href="#Leetcode217" class="headerlink" title="Leetcode217"></a>Leetcode217</h2><p><img src="https://github.com/muzicoding/Img/blob/master/leetcode%E6%97%A5%E8%AE%B0/%E5%93%88%E5%B8%8C%E8%A1%A8/Snipaste_2024-06-18_10-55-46.jpg?raw=true"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsDuplicate</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!set.add(x)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Leetcode389"><a href="#Leetcode389" class="headerlink" title="Leetcode389"></a>Leetcode389</h2><p><img src="https://github.com/muzicoding/Img/blob/master/leetcode%E6%97%A5%E8%AE%B0/%E5%93%88%E5%B8%8C%E8%A1%A8/Snipaste_2024-06-18_11-30-08.jpg?raw=true"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">findTheDifference</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] cnt = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            cnt[ch - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; t.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> t.charAt(i);</span><br><span class="line">            cnt[ch - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">            <span class="keyword">if</span> (cnt[ch - <span class="string">&#x27;a&#x27;</span>] &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">                <span class="keyword">return</span> ch;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode日记(7)Java栈常用操作</title>
      <link href="/2024/06/16/Leetcode%E6%97%A5%E8%AE%B0(7)Java%E6%A0%88%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2024/06/16/Leetcode%E6%97%A5%E8%AE%B0(7)Java%E6%A0%88%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Java栈常用操作"><a href="#Java栈常用操作" class="headerlink" title="Java栈常用操作"></a>Java栈常用操作</h1><h2 id="创建栈Stack"><a href="#创建栈Stack" class="headerlink" title="创建栈Stack"></a>创建栈Stack</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create a stack</span></span><br><span class="line">Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add element</span></span><br><span class="line"><span class="comment">// Time Complexity: O(1)</span></span><br><span class="line">stack.push(<span class="number">1</span>);</span><br><span class="line">stack.push(<span class="number">2</span>);</span><br><span class="line">stack.push(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br><span class="line">System.out.println(stack.toString());</span><br></pre></td></tr></table></figure><h2 id="获取栈顶元素"><a href="#获取栈顶元素" class="headerlink" title="获取栈顶元素"></a>获取栈顶元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get the top of stack</span></span><br><span class="line"><span class="comment">// Time Complexity: O(1)</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="type">int</span> <span class="variable">item</span> <span class="operator">=</span> stack.peek();</span><br><span class="line">System.out.println(item);</span><br></pre></td></tr></table></figure><h2 id="删除栈顶元素"><a href="#删除栈顶元素" class="headerlink" title="删除栈顶元素"></a>删除栈顶元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Remove the top of stack</span></span><br><span class="line"><span class="comment">// Time Complexity: O(1)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> stack.pop();</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line">System.out.println(temp);</span><br></pre></td></tr></table></figure><h2 id="栈的大小"><a href="#栈的大小" class="headerlink" title="栈的大小"></a>栈的大小</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Stack length</span></span><br><span class="line"><span class="comment">// Time Complexity: O(1)</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">stack.size();</span><br></pre></td></tr></table></figure><h2 id="栈是否为空"><a href="#栈是否为空" class="headerlink" title="栈是否为空"></a>栈是否为空</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Stack is empty?</span></span><br><span class="line"><span class="comment">// Time Complexity: O(1)</span></span><br><span class="line"><span class="comment">// false</span></span><br><span class="line">stack.isEmpty();</span><br></pre></td></tr></table></figure><h2 id="栈的遍历（边删除边遍历）"><a href="#栈的遍历（边删除边遍历）" class="headerlink" title="栈的遍历（边删除边遍历）"></a>栈的遍历（边删除边遍历）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Iterate a stacke</span></span><br><span class="line"><span class="comment">// Time Complexity: O(N)</span></span><br><span class="line"><span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">    System.out.println(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode日记(6)队列相关题933</title>
      <link href="/2024/06/08/Leetcode%E6%97%A5%E8%AE%B0(6)%E9%98%9F%E5%88%97%E7%9B%B8%E5%85%B3933/"/>
      <url>/2024/06/08/Leetcode%E6%97%A5%E8%AE%B0(6)%E9%98%9F%E5%88%97%E7%9B%B8%E5%85%B3933/</url>
      
        <content type="html"><![CDATA[<h2 id="Leetcode933"><a href="#Leetcode933" class="headerlink" title="Leetcode933"></a>Leetcode933</h2><p><img src="https://github.com/muzicoding/Img/blob/master/leetcode%E6%97%A5%E8%AE%B0/%E9%98%9F%E5%88%97/Snipaste_2024-06-07_15-26-03.jpg?raw=true"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RecentCounter</span> &#123;</span><br><span class="line">    Queue&lt;Integer&gt; queue;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RecentCounter</span><span class="params">()</span> &#123;</span><br><span class="line">        queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">ping</span><span class="params">(<span class="type">int</span> t)</span> &#123;</span><br><span class="line">        queue.add(t);</span><br><span class="line">        <span class="keyword">while</span> (t - queue.peek() &gt; <span class="number">3000</span>) &#123;</span><br><span class="line">            queue.poll();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> queue.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your RecentCounter object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * RecentCounter obj = new RecentCounter();</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.ping(t);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode日记(5)Java队列常用操作</title>
      <link href="/2024/06/07/Leetcode%E6%97%A5%E8%AE%B0(5)Java%E9%98%9F%E5%88%97%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2024/06/07/Leetcode%E6%97%A5%E8%AE%B0(5)Java%E9%98%9F%E5%88%97%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Java队列常用操作"><a href="#Java队列常用操作" class="headerlink" title="Java队列常用操作"></a>Java队列常用操作</h1><h2 id="创建队列"><a href="#创建队列" class="headerlink" title="创建队列"></a>创建队列</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Creat a queue</span></span><br><span class="line">Queue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add element</span></span><br><span class="line"><span class="comment">// Time Complexity*: O(1)</span></span><br><span class="line">queue.add(<span class="number">1</span>);</span><br><span class="line">queue.add(<span class="number">2</span>);</span><br><span class="line">queue.add(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br><span class="line">System.out.println(queue.toString());</span><br></pre></td></tr></table></figure><h2 id="获取即将出队列的元素"><a href="#获取即将出队列的元素" class="headerlink" title="获取即将出队列的元素"></a>获取即将出队列的元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get the head of queue</span></span><br><span class="line"><span class="comment">// Time Complexity*: O(1)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp1</span> <span class="operator">=</span> queue.peek();</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line">System.out.println(temp1);</span><br></pre></td></tr></table></figure><h2 id="删除即将出队列的元素"><a href="#删除即将出队列的元素" class="headerlink" title="删除即将出队列的元素"></a>删除即将出队列的元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Remove the head of queue</span></span><br><span class="line"><span class="comment">// Time Complexity*: O(1)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp2</span> <span class="operator">=</span> queue.poll();</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line">System.out.println(temp2);</span><br><span class="line"><span class="comment">// [2, 3]</span></span><br><span class="line">System.out.println(queue.toString());</span><br></pre></td></tr></table></figure><h2 id="判断队列是否为空"><a href="#判断队列是否为空" class="headerlink" title="判断队列是否为空"></a>判断队列是否为空</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Queue is empty?</span></span><br><span class="line"><span class="comment">// Time Complexity: O(1)</span></span><br><span class="line"><span class="comment">// false</span></span><br><span class="line">System.out.println(queue.isEmpty());</span><br></pre></td></tr></table></figure><h2 id="队列长度"><a href="#队列长度" class="headerlink" title="队列长度"></a>队列长度</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The length of Queue</span></span><br><span class="line"><span class="comment">// Time Complexity: O(1)</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">System.out.println(queue.size());</span><br></pre></td></tr></table></figure><h2 id="遍历队列"><a href="#遍历队列" class="headerlink" title="遍历队列"></a>遍历队列</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Time Complexity: O(N)</span></span><br><span class="line"><span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">    System.out.println(temp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode日记(4)数组相关题203_206</title>
      <link href="/2024/06/06/Leetcode%E6%97%A5%E8%AE%B0(4)%E9%93%BE%E8%A1%A8%E7%9B%B8%E5%85%B3203_206/"/>
      <url>/2024/06/06/Leetcode%E6%97%A5%E8%AE%B0(4)%E9%93%BE%E8%A1%A8%E7%9B%B8%E5%85%B3203_206/</url>
      
        <content type="html"><![CDATA[<h2 id="Leetcode203"><a href="#Leetcode203" class="headerlink" title="Leetcode203"></a>Leetcode203</h2><p><img src="https://github.com/muzicoding/Img/blob/master/leetcode%E6%97%A5%E8%AE%B0/%E9%93%BE%E8%A1%A8/Snipaste_2024-06-06_09-54-18.jpg?raw=true"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">prev</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (head.val == val) &#123;</span><br><span class="line">                prev.next = head.next;</span><br><span class="line">                head = head.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                prev = head;</span><br><span class="line">                head = head.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Leetcode206"><a href="#Leetcode206" class="headerlink" title="Leetcode206"></a>Leetcode206</h2><p><img src="https://github.com/muzicoding/Img/blob/master/leetcode%E6%97%A5%E8%AE%B0/%E9%93%BE%E8%A1%A8/Snipaste_2024-06-06_10-55-37.jpg?raw=true"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">null</span> &amp;&amp; head.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">dnext</span> <span class="operator">=</span> dummy.next;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">hnext</span> <span class="operator">=</span> head.next;</span><br><span class="line">            dummy.next = hnext;</span><br><span class="line">            head.next = hnext.next;</span><br><span class="line">            hnext.next = dnext;           </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode日记(3):Java链表常用操作</title>
      <link href="/2024/06/05/Leetcode%E6%97%A5%E8%AE%B0(3)Java%E9%93%BE%E8%A1%A8%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2024/06/05/Leetcode%E6%97%A5%E8%AE%B0(3)Java%E9%93%BE%E8%A1%A8%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Java链表常用操作"><a href="#Java链表常用操作" class="headerlink" title="Java链表常用操作"></a>Java链表常用操作</h1><h2 id="创建链表"><a href="#创建链表" class="headerlink" title="创建链表"></a>创建链表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create a LinkedList</span></span><br><span class="line">LinkedList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add element</span></span><br><span class="line"><span class="comment">// Time Complexity: O(1)</span></span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br><span class="line">System.out.println(list.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Insert element</span></span><br><span class="line"><span class="comment">// Time Complexity: O(N)</span></span><br><span class="line">list.add(<span class="number">2</span>, <span class="number">99</span>);</span><br><span class="line"><span class="comment">// [1, 2, 99, 3]</span></span><br><span class="line">System.out.println(list.toString());</span><br></pre></td></tr></table></figure><h2 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Access Element</span></span><br><span class="line"><span class="comment">// Time Complexity: O(N)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">element</span> <span class="operator">=</span> list.get(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 99</span></span><br><span class="line">System.out.println(element);</span><br></pre></td></tr></table></figure><h2 id="搜索元素"><a href="#搜索元素" class="headerlink" title="搜索元素"></a>搜索元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Search element</span></span><br><span class="line"><span class="comment">// Time Complexity: O(N)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> list.indexOf(<span class="number">99</span>);</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">System.out.println(index);</span><br></pre></td></tr></table></figure><h2 id="更新元素"><a href="#更新元素" class="headerlink" title="更新元素"></a>更新元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Update element</span></span><br><span class="line"><span class="comment">// Time Complexity: O(N)</span></span><br><span class="line">list.set(<span class="number">2</span>, <span class="number">88</span>);</span><br><span class="line"><span class="comment">// [1, 2, 88, 3]</span></span><br><span class="line">System.out.println(list.toString());</span><br></pre></td></tr></table></figure><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Remove element</span></span><br><span class="line"><span class="comment">// Time Complexity: O(N)</span></span><br><span class="line">list.remove(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br><span class="line">System.out.println(list.toString());</span><br></pre></td></tr></table></figure><h2 id="链表长度"><a href="#链表长度" class="headerlink" title="链表长度"></a>链表长度</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Length</span></span><br><span class="line"><span class="comment">// Time Complexity: O(1)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> list.size();</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line">System.out.println(length);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Java链表操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode日记(1):Java数组常用操作</title>
      <link href="/2024/06/04/Leetcode%E6%97%A5%E8%AE%B0(1)Java%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2024/06/04/Leetcode%E6%97%A5%E8%AE%B0(1)Java%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Java数组常用操作"><a href="#Java数组常用操作" class="headerlink" title="Java数组常用操作"></a>Java数组常用操作</h1><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Four solution to create an array in Java</span></span><br><span class="line"><span class="comment">// Take [1, 2, 3] as example</span></span><br><span class="line"><span class="comment">// Solution 1</span></span><br><span class="line"><span class="type">int</span>[] a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">System.out.println(<span class="string">&quot;a:&quot;</span> + Arrays.toString(a));</span><br><span class="line"><span class="comment">// Solution 2</span></span><br><span class="line"><span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">System.out.println(<span class="string">&quot;b:&quot;</span> + Arrays.toString(b));</span><br><span class="line"><span class="comment">// Solution 3</span></span><br><span class="line"><span class="type">int</span>[] c = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; c.length; i++) &#123;</span><br><span class="line">    c[i] = i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;c:&quot;</span> + Arrays.toString(c));</span><br><span class="line"><span class="comment">// Solution 4</span></span><br><span class="line">ArrayList&lt;Integer&gt; arr = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    arr.add(i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;arr:&quot;</span> + arr.toString());</span><br></pre></td></tr></table></figure><h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add element </span></span><br><span class="line"><span class="comment">// Time Complexity: O(1)</span></span><br><span class="line">arr.add(<span class="number">99</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3, 99]</span></span><br><span class="line">System.out.println(<span class="string">&quot;arr:&quot;</span> + arr.toString());</span><br><span class="line"><span class="comment">// Insert element</span></span><br><span class="line"><span class="comment">// Time Complexity: O(N)</span></span><br><span class="line">arr.add(<span class="number">3</span>, <span class="number">88</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3, 88, 99]</span></span><br><span class="line">System.out.println(<span class="string">&quot;arr:&quot;</span> + arr.toString());</span><br></pre></td></tr></table></figure><h2 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h2><p>通过下标索引访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Access element</span></span><br><span class="line"><span class="comment">// Time Complexity: O(1)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">c1</span> <span class="operator">=</span> c[<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">arr1</span> <span class="operator">=</span> arr.get(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">System.out.println(<span class="string">&quot;c1:&quot;</span> + c1);</span><br><span class="line">System.out.println(<span class="string">&quot;arr1:&quot;</span> + arr1);</span><br></pre></td></tr></table></figure><h2 id="更新元素"><a href="#更新元素" class="headerlink" title="更新元素"></a>更新元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Update element</span></span><br><span class="line"><span class="comment">// Time Complexity: O(1)</span></span><br><span class="line">c[<span class="number">1</span>] = <span class="number">11</span>;</span><br><span class="line">arr.set(<span class="number">1</span>, <span class="number">11</span>);</span><br><span class="line"><span class="comment">// 2 -&gt; 11</span></span><br><span class="line">System.out.println(<span class="string">&quot;c1:&quot;</span> + c[<span class="number">1</span>]);</span><br><span class="line">System.out.println(<span class="string">&quot;arr1:&quot;</span> + arr.get(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Delete element</span></span><br><span class="line"><span class="comment">// Time Complexity: O(N)</span></span><br><span class="line">arr.remove(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// [1, 11, 3, 99]</span></span><br><span class="line">System.out.println(arr.toString());</span><br></pre></td></tr></table></figure><h2 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// The length of an array</span><br><span class="line">// Time Complexity: O(1)</span><br><span class="line">int cSize = c.length;</span><br><span class="line">int arrSize = arr.size();</span><br><span class="line">System.out.println(&quot;c length&quot; + cSize);</span><br><span class="line">System.out.println(&quot;arr length&quot; + arrSize);</span><br></pre></td></tr></table></figure><h2 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Iterate an array</span></span><br><span class="line"><span class="comment">// Iterate c</span></span><br><span class="line"><span class="comment">// Time Complexity: O(N)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; c.length; i++) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> c[i];</span><br><span class="line">    System.out.println(<span class="string">&quot;c at index &quot;</span> + i + <span class="string">&quot;: &quot;</span> + current);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Iterate arr</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.size(); i++) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> arr.get(i);</span><br><span class="line">    System.out.println(<span class="string">&quot;arr at index &quot;</span> + i + <span class="string">&quot;: &quot;</span> + current);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Find an element</span></span><br><span class="line"><span class="comment">// Find and element c</span></span><br><span class="line"><span class="comment">// Time Complexity: O(N)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; c.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (c[i] == <span class="number">99</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;We found 99 in c!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Find an element in arr</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">is99</span> <span class="operator">=</span> arr.contains(<span class="number">99</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Are we found 99 in arr?&quot;</span> + is99);</span><br></pre></td></tr></table></figure><h2 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sort an array by built-in lib</span></span><br><span class="line">c = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">arr.add(<span class="number">2</span>);</span><br><span class="line">arr.add(<span class="number">3</span>);</span><br><span class="line">arr.add(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// [2, 3, 1]</span></span><br><span class="line">System.out.println(<span class="string">&quot;c: &quot;</span> + Arrays.toString(c));</span><br><span class="line">System.out.println(<span class="string">&quot;arr: &quot;</span> + arr.toString());</span><br><span class="line"><span class="comment">// from small to big</span></span><br><span class="line"><span class="comment">// Time Complexity: O(NlogN)</span></span><br><span class="line">Arrays.sort(c);</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br><span class="line">System.out.println(<span class="string">&quot;c: &quot;</span> + Arrays.toString(c));</span><br><span class="line">Collections.sort(arr);</span><br><span class="line">System.out.println(<span class="string">&quot;arr: &quot;</span> + arr);</span><br><span class="line"><span class="comment">// From big to small</span></span><br><span class="line"><span class="comment">// Time Complexity: O(NlogN)</span></span><br><span class="line"><span class="comment">// For c, you can read an array in reverse</span></span><br><span class="line"><span class="comment">// Arrays.sort(c, Collections.reverseOrder(c));</span></span><br><span class="line"><span class="comment">// For arr</span></span><br><span class="line">Collections.sort(arr, Collections.reverseOrder());</span><br><span class="line"><span class="comment">// [3, 2, 1]</span></span><br><span class="line">System.out.println(<span class="string">&quot;arr: &quot;</span> + arr);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Java数组操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode日记(2)数组相关题485_283_27</title>
      <link href="/2024/06/04/Leetcode%E6%97%A5%E8%AE%B0(2)%E6%95%B0%E7%BB%84%E7%9B%B8%E5%85%B3485_283_27/"/>
      <url>/2024/06/04/Leetcode%E6%97%A5%E8%AE%B0(2)%E6%95%B0%E7%BB%84%E7%9B%B8%E5%85%B3485_283_27/</url>
      
        <content type="html"><![CDATA[<h2 id="Leetcode485"><a href="#Leetcode485" class="headerlink" title="Leetcode485"></a>Leetcode485</h2><p><img src="https://github.com/muzicoding/Img/blob/master/leetcode%E6%97%A5%E8%AE%B0/%E6%95%B0%E7%BB%84/Snipaste_2024-06-04_17-11-34.jpg?raw=true"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMaxConsecutiveOnes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxCount</span> <span class="operator">=</span> <span class="number">0</span>, count = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == <span class="number">1</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                maxCount = Math.max(maxCount, count);</span><br><span class="line">                count = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        maxCount = Math.max(maxCount, count);</span><br><span class="line">        <span class="keyword">return</span> maxCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复杂度分析</p><p>时间复杂度：O(n)，其中n是数组的长度。需要遍历数组一次。<br>空间复杂度：O(1)。</p><h2 id="Leetcode283"><a href="#Leetcode283" class="headerlink" title="Leetcode283"></a>Leetcode283</h2><p><img src="https://github.com/muzicoding/Img/blob/master/leetcode%E6%97%A5%E8%AE%B0/%E6%95%B0%E7%BB%84/Snipaste_2024-06-04_17-38-36.jpg?raw=true"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != <span class="number">0</span>) &#123;</span><br><span class="line">                nums[index] = nums[i];</span><br><span class="line">                index ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index; i &lt; nums.length; i++) &#123;</span><br><span class="line">            nums[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Leetcode27"><a href="#Leetcode27" class="headerlink" title="Leetcode27"></a>Leetcode27</h2><p><img src="https://github.com/muzicoding/Img/blob/master/leetcode%E6%97%A5%E8%AE%B0/%E6%95%B0%E7%BB%84/Snipaste_2024-06-04_17-57-14.jpg?raw=true"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != val) &#123;</span><br><span class="line">                nums[index] = nums[i];</span><br><span class="line">                index ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组会6.2低光照图像增强论文阅读</title>
      <link href="/2024/05/31/%E7%BB%84%E4%BC%9A6.2%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
      <url>/2024/05/31/%E7%BB%84%E4%BC%9A6.2%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="低光照图像增强论文阅读"><a href="#低光照图像增强论文阅读" class="headerlink" title="低光照图像增强论文阅读"></a>低光照图像增强论文阅读</h1><h2 id="Kindling-the-Darkness-A-Practical-Low-light-Image-Enhancer"><a href="#Kindling-the-Darkness-A-Practical-Low-light-Image-Enhancer" class="headerlink" title="Kindling the Darkness: A Practical Low-light Image Enhancer"></a>Kindling the Darkness: A Practical Low-light Image Enhancer</h2><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>在弱光条件下拍摄的图像通常(部分)能见度较差。除了不理想的照明，多种类型的退化，如噪声和颜色失真，由于相机的质量有限，这些退化隐藏在黑暗中。换句话说，仅仅提高黑暗区域的亮度将不可避免地放大隐藏的退化。该项工作构建了一个简单而有效的网络，该网络受 Retinex 理论的启发，将图像分解为两个组件。一个组件负责光调节（照明），而另一个用于去除退化（反射）。值得注意的是，我们的网络使用在不同曝光条件下拍摄的成对图像进行训练，而不是使用任何地面真实反射率和照明信息。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>与Retinex-Net假设类似，图像可以分解为反射率$R$和照度$L$，$I &#x3D; R◦L$。不同的是，论文认为低光照图像除了光照分量较低外，还存在图像退化（比如颜色失真，噪声），只不过退化被低光照分量掩盖了，所以不易观察。仅仅提高黑暗区域的亮度将不可避免地放大隐藏的退化，如下图所示。</p><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_11-08-46.jpg?raw=true"></p><p>因此，可对暗光图像I做如下分解。</p><p>$I&#x3D;L\circ R + E&#x3D;L\circ(R+\tilde{E})$</p><p>其中$E$为退化分量，$ \tilde{E} $为分解之后的反射分量的退化。</p><p>所以该论文进行暗光图像增强的思路是：</p><p>（1）将图像$I$合理的分解为$R$和$L$，通过调整光照分量$L$，得到合理的光照分量 $\bar{L}$ ；</p><p>（2）通过重建反射分量$R$，得到合理的反射分量 $\tilde{R} &#x3D; R - \tilde{E}$ ；</p><p>（3）图像暗光增强：$ \tilde{I} &#x3D; \tilde{L} \circ \tilde{R}$</p><p>论文采用卷积神经网络（KinD Network）来预测纠正后的光照分量和反射分量。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_14-25-34.jpg?raw=true"></p><p>网络分为：*<em>层分解网络（ <em>Layer Decomposition Net</em>），反射恢复网络（</em>Reflectance Restoration Net*），照度调整网络（ <em>Illumination Adjustment Net</em>）**。</p><p><strong>层分解网络</strong>规范了分解后的反射率对[Rl，Rh]，使其更接近（理想情况下，如果无退化，则是相同的）。此外，照明图[Ll，Lh]应该是平光滑和相互一致的。</p><p>层分解网络的损失函数构成为：</p><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_14-50-46.jpg?raw=true"></p><p>其中，包括重构误差损失：</p><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_14-56-59.jpg?raw=true"></p><p>反射相似度损失：</p><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_14-54-17.jpg?raw=true"></p><p>照明平滑度损失：</p><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_14-55-05.jpg?raw=true"></p><p>$\triangledown$代表一阶导数算子，$\epsilon$是一个很小的避免零分母的正常数（在本工作中为0.01）。该损失对于I中边缘上的位置，L上的惩罚很小；而对于I中平坦区域的位置，惩罚会很大。</p><p>相互一致损失：</p><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_14-56-23.jpg?raw=true"></p><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_15-23-14.jpg?raw=true"></p><p>损失函数如图，惩罚首先上升，但然后随着u的增加而下降到0。损失可以保证强相互边缘应保持，而弱相互边缘应降低。（这个损失的一个理解是在强化边缘信息，暗光和正常光的光照图梯度和较小或较大时表示此时的光照在平滑物体表面（分布均匀）或者边缘（光照分布差异较大），只有在梯度和不大不小时才惩罚，应该是两者一个梯度大一个梯度小的情况，也就是两个光照图有差异且差异不是特别大（因为有一个特别大也会使损失变小）的区域。）</p><p><strong>反射恢复网络</strong>损失如下：</p><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_15-41-38.jpg?raw=true"></p><p>退化在反射上的分布复杂，且强烈依赖于照明分布。因此，将光照信息和退化的反射一起引入到恢复网络中。这个操作的有效的。</p><p><strong>照明调整网络</strong>损失如下：</p><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_15-42-40.jpg?raw=true"></p><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_15-57-45.jpg?raw=true"></p><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_15-57-56.jpg?raw=true"></p><h2 id="Integrating-Semantic-Segmentation-and-Retinex-Model-for-Low-Light-Image-Enhancement"><a href="#Integrating-Semantic-Segmentation-and-Retinex-Model-for-Low-Light-Image-Enhancement" class="headerlink" title="Integrating Semantic Segmentation and Retinex Model for Low Light Image Enhancement"></a>Integrating Semantic Segmentation and Retinex Model for Low Light Image Enhancement</h2><h3 id="摘要-1"><a href="#摘要-1" class="headerlink" title="摘要"></a>摘要</h3><p>Retinex 模型被广泛应用于各种低光图像增强任务。Retinex 理论的基本思想是将图像分解为反射和照明。不适定分解通常由手工制作的约束和先验来处理。以最近出现的基于深度学习的方法为工具，本文将 Retinex 分解的思想与语义信息感知相结合。基于各种物体和背景具有不同材质、反射和透视属性的观察，单个低光图像的区域可能需要在对比度、照明和噪声方面进行不同的调整和增强。提出了一种由三部分组成的增强流程，可有效利用语义层信息。具体而言，我们提取分割、反射和照明层，并同时增强每个单独的区域，即户外场景的天空、地面和物体。在合成数据和真实世界图像上进行的大量实验证明了我们的方法优于当前最先进的低光增强算法。</p><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><p>其他基于Retinex方法的局限性：它们是用手工制作的约束条件构建的。因此，这些方法对<strong>不同类型的自然图像</strong>的复杂信号特性的捕捉都不具有足够的适应性。语义信息可以为微光增强提供丰富的信息。 例如，天空等平滑区域的噪声可以被强烈模糊，而不影响主观效果，而对于街道标识等细节丰富的区域，去噪时要小心，否则会破坏细节。然而，现有的微光增强方法忽视了语义信息的重要性，因而性能有限。基于此，论文提出了一种新的语义感知的微光增强网络，利用语义信息更好地理解场景和恢复内在反射率。</p><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_16-19-21.jpg?raw=true"></p><p>网络分为<strong>信息提取（information Extraction），反射增强（Reflectance Enhancement），照明调整（Illumination Adjustment）。</strong></p><p><strong>信息提取</strong>部分又分为<strong>分解网络（DecompNet）</strong>和<strong>语义分割网络（SegNet）</strong>。</p><p><strong>分解网络（DecompNet）</strong>用于提取反射R和照明层L，其结构和损失均参考自上篇KinD。</p><p><strong>语义分割网络（SegNet）</strong>，为了指导弱光增强，并不需要进行细粒度分类。本文只是简单地将街景分成三个部分：天空、地面和前景的物体。这三个区域通常在透视属性和反射属性上有所不同。天空通常是光滑的，而且通常与地面上的物体有不同的光源。与行车道相比，其他前景物体通常更明亮，并包含更丰富的细节。为了提取语义特征，我们采用了一个轻量级的U-Net，它强大到足以处理三类分割任务。低光图像和正光图像都用于训练SegNet。将𝑆𝐿和𝑆𝐻分别表示为𝐼𝐿和𝐼𝐻的分割估计，基本分割目标函数为 </p><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_17-08-53.jpg?raw=true"></p><p>CE代表计算交叉熵损失。</p><p><strong>反射增强</strong>网络内部结构如图</p><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_16-20-08.jpg?raw=true"></p><p>其由一些 <strong>Residual In Residual (RIR)</strong> 块组成，为了引进语义信息，设计了一种变体—— Semantic Residual In Residual (SRIR) 块，语义信息通过一个线性转换（a linear transformation），来调节RL 的特征。反射增强网络的损失与上篇KinD的反射恢复网络的损失相同。</p><p><strong>照明调整</strong>由一个Unet构成。引入了比例参数ρ 来指导调整过程。对于训练，ρ 是根据ground truth 的像素均值与输入IL的像素均值之比来定义的，而在测试阶段，使用固定的ρ&#x3D; 5.0。该比例也可让用户交互提供，来控制提亮程度。损失如下：</p><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_17-17-11.jpg?raw=true"></p><h3 id="实验结果-1"><a href="#实验结果-1" class="headerlink" title="实验结果"></a>实验结果</h3><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_17-17-54.jpg?raw=true"></p><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_17-18-33.jpg?raw=true"></p><h2 id="Pyramid-Diffusion-Models-for-Low-light-Image-Enhancement"><a href="#Pyramid-Diffusion-Models-for-Low-light-Image-Enhancement" class="headerlink" title="Pyramid Diffusion Models for Low-light Image Enhancement"></a>Pyramid Diffusion Models for Low-light Image Enhancement</h2><h3 id="主要贡献"><a href="#主要贡献" class="headerlink" title="主要贡献"></a>主要贡献</h3><p>（1）首次将Diffusion Models引入低光图像增强任务，提出PyDiff方法，相比之前的SOTA方法能恢复更好的纹理和颜色。目前在LOL benchmark上是第一名。</p><p>（2）提出了Pyramid Diffusion采样方法，可以在性能几乎无损的前提下极大加速Diffusion Models的逆过程。该方法可以与当前大多数在图像pixel space上做扩散的方法相结合，实现进一步加速。</p><p>（3）分析了将Diffusion Models应用在低光图像增强任务时会出现色差问题的原因，并提出使用一个轻量的Global Corrector解决该色差问题。</p><h3 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h3><p>diffusion models主要在t较小的时刻恢复图像纹理这种细节信息，在t较大时刻并不太关注细节的恢复。因此，在t较大的时候，我们完全可以在更小的分辨率上进行加噪去噪，然后随着t的减小，我们再慢慢上采样回原始分辨率。这样不仅可以加快网络的推理速度，还能为网络提供更大的感受野，从而更好地恢复全局信息。</p><p><img src="https://pic1.zhimg.com/v2-a8a2fd6201cbc9d28aefad53fd76624c_b.jpg"></p><p>在PyDiff之前，所有基于diffusion models的方法在单次逆过程中都是保持相同的分辨率。PyDiff采用了一种新颖的pyramid diffusion采样方法。在单次逆过程中，PyDiff逐渐从一个较小的分辨率逐渐上采样到目标图像的分辨率。从图可以看出来，使用pyramid diffusion的采样方法并不会影响最后结果的纹理细节。</p><h3 id="实验结果-2"><a href="#实验结果-2" class="headerlink" title="实验结果"></a>实验结果</h3><p>与SR3的做法一致，通过将 $x_{t}$ 和源域图像concat起来，从而实现条件的扩散。具体地，选择将输入的低光图像 $x_{low} $和其对应的直方图均衡输出 $x_{heq} $跟噪声图像$ x_{t} $concat起来输入到U-net中。结合DDIM sampler，发现PyDiff只需要4次迭代就能达到跟以往SOTA相匹敌的结果。</p><p><img src="https://pic3.zhimg.com/v2-94fa620d92e1a728585b0677af663f7a_b.jpg"></p><p><img src="https://pic4.zhimg.com/v2-8739d017e5d127b56071b4fe4e9dfc1f_b.jpg"></p><p>–该篇论文阅读内容主要摘自论文原作者知乎文章，具体参照参考引用7。</p><h2 id="参考引用："><a href="#参考引用：" class="headerlink" title="参考引用："></a>参考引用：</h2><ol><li><a href="https://cic.tju.edu.cn/faculty/zhangjiawan/Jiawan_Zhang_files/paper/yonghuazhang2019-2.pdf">Kindling the Darkness: A Practical Low-light Image Enhancer</a></li><li><a href="https://zhuanlan.zhihu.com/p/556166233">深度学习暗光图像增强（二）：（KinD）《Kindling the Darkness:A Practical Low-light Image Enhancer》</a></li><li><a href="https://blog.csdn.net/wzzzj/article/details/121733883">Kindling the Darkness: A Practical Low-light Image Enhancer论文学习</a></li><li><a href="https://mm20-semanticreti.github.io/">Integrating Semantic Segmentation and Retinex Model for Low Light Image Enhancement</a></li><li><a href="https://blog.csdn.net/weixin_45725902/article/details/115471641">论文笔记：Integrating Semantic Segmentation and Retinex Model for Low Light Image Enhancement</a></li><li><a href="https://link.zhihu.com/?target=https://www.ijcai.org/proceedings/2023/0199.pdf">Pyramid Diffusion Models for Low-light Image Enhancement</a></li><li><a href="https://zhuanlan.zhihu.com/p/656759873">知乎:[IJCAI 2023] Pyramid Diffusion Models for Low-light Image Enhancement</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 组会 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 低光照图图像增强 </tag>
            
            <tag> 论文阅读 </tag>
            
            <tag> Kindling the Darkness:A Practical Low-light Image Enhancer </tag>
            
            <tag> Integrating Semantic Segmentation and Retinex Model for Low Light Image Enhancement </tag>
            
            <tag> Pyramid Diffusion Models for Low-light Image Enhancement </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh连接macOS服务器</title>
      <link href="/2024/05/28/ssh%E8%BF%9E%E6%8E%A5macOS%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2024/05/28/ssh%E8%BF%9E%E6%8E%A5macOS%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>突发奇想想把吃灰的MacBook Pro2018 用作服务器，装上MySQL用来当数据库服务器。<br>所以要设置在同一局域网内ssh连接mac的方式。</p><p>在mac的设置中搜索“共享”，找到“高级”，“远程登录”打开就好了。<br><img src="https://github.com/muzicoding/Img/blob/master/%E9%97%AE%E9%A2%98%E6%9D%82%E8%B0%88ssh%E8%BF%9E%E6%8E%A5mac/Snipaste_2024-05-28_10-21-13.jpg?raw=true"></p><p>“远程登录”按钮右边点进去可以设置允许访问的用户和群组。<br><img src="https://github.com/muzicoding/Img/blob/master/%E9%97%AE%E9%A2%98%E6%9D%82%E8%B0%88ssh%E8%BF%9E%E6%8E%A5mac/Snipaste_2024-05-28_10-25-19.jpg?raw=true"></p><p>要远程登录在另一台电脑中输入“ssh 用户名@ip地址”，然后输入密码就好了。</p><p><img src="https://github.com/muzicoding/Img/blob/master/%E9%97%AE%E9%A2%98%E6%9D%82%E8%B0%88ssh%E8%BF%9E%E6%8E%A5mac/483C5B4616221D8FF6EDA31B78F3424D.jpg?raw=true"></p><p>PS：配置好mac数据库，用另一台电脑测试数据库连接时，发现mac的防火墙竟然是默认关闭。</p>]]></content>
      
      
      <categories>
          
          <category> 问题杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/05/26/hello-world/"/>
      <url>/2024/05/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p>一个敲代码的人</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
