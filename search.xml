<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>leetcode日记(5)Java队列常用操作</title>
      <link href="/2024/06/07/Leetcode%E6%97%A5%E8%AE%B0(5)Java%E9%98%9F%E5%88%97%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2024/06/07/Leetcode%E6%97%A5%E8%AE%B0(5)Java%E9%98%9F%E5%88%97%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Java队列常用操作"><a href="#Java队列常用操作" class="headerlink" title="Java队列常用操作"></a>Java队列常用操作</h1><h2 id="创建队列"><a href="#创建队列" class="headerlink" title="创建队列"></a>创建队列</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Creat a queue</span></span><br><span class="line">Queue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add element</span></span><br><span class="line"><span class="comment">// Time Complexity*: O(1)</span></span><br><span class="line">queue.add(<span class="number">1</span>);</span><br><span class="line">queue.add(<span class="number">2</span>);</span><br><span class="line">queue.add(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br><span class="line">System.out.println(queue.toString());</span><br></pre></td></tr></table></figure><h2 id="获取即将出队列的元素"><a href="#获取即将出队列的元素" class="headerlink" title="获取即将出队列的元素"></a>获取即将出队列的元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get the head of queue</span></span><br><span class="line"><span class="comment">// Time Complexity*: O(1)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp1</span> <span class="operator">=</span> queue.peek();</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line">System.out.println(temp1);</span><br></pre></td></tr></table></figure><h2 id="删除即将出队列的元素"><a href="#删除即将出队列的元素" class="headerlink" title="删除即将出队列的元素"></a>删除即将出队列的元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Remove the head of queue</span></span><br><span class="line"><span class="comment">// Time Complexity*: O(1)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp2</span> <span class="operator">=</span> queue.poll();</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line">System.out.println(temp2);</span><br><span class="line"><span class="comment">// [2, 3]</span></span><br><span class="line">System.out.println(queue.toString());</span><br></pre></td></tr></table></figure><h2 id="判断队列是否为空"><a href="#判断队列是否为空" class="headerlink" title="判断队列是否为空"></a>判断队列是否为空</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Queue is empty?</span></span><br><span class="line"><span class="comment">// Time Complexity: O(1)</span></span><br><span class="line"><span class="comment">// false</span></span><br><span class="line">System.out.println(queue.isEmpty());</span><br></pre></td></tr></table></figure><h2 id="队列长度"><a href="#队列长度" class="headerlink" title="队列长度"></a>队列长度</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The length of Queue</span></span><br><span class="line"><span class="comment">// Time Complexity: O(1)</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">System.out.println(queue.size());</span><br></pre></td></tr></table></figure><h2 id="遍历队列"><a href="#遍历队列" class="headerlink" title="遍历队列"></a>遍历队列</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Time Complexity: O(N)</span></span><br><span class="line"><span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">    System.out.println(temp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode日记(4)数组相关题203_206</title>
      <link href="/2024/06/06/Leetcode%E6%97%A5%E8%AE%B0(4)%E9%93%BE%E8%A1%A8%E7%9B%B8%E5%85%B3203_206/"/>
      <url>/2024/06/06/Leetcode%E6%97%A5%E8%AE%B0(4)%E9%93%BE%E8%A1%A8%E7%9B%B8%E5%85%B3203_206/</url>
      
        <content type="html"><![CDATA[<h2 id="Leetcode203"><a href="#Leetcode203" class="headerlink" title="Leetcode203"></a>Leetcode203</h2><p><img src="https://github.com/muzicoding/Img/blob/master/leetcode%E6%97%A5%E8%AE%B0/%E9%93%BE%E8%A1%A8/Snipaste_2024-06-06_09-54-18.jpg?raw=true"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">prev</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (head.val == val) &#123;</span><br><span class="line">                prev.next = head.next;</span><br><span class="line">                head = head.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                prev = head;</span><br><span class="line">                head = head.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Leetcode206"><a href="#Leetcode206" class="headerlink" title="Leetcode206"></a>Leetcode206</h2><p><img src="https://github.com/muzicoding/Img/blob/master/leetcode%E6%97%A5%E8%AE%B0/%E9%93%BE%E8%A1%A8/Snipaste_2024-06-06_10-55-37.jpg?raw=true"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">null</span> &amp;&amp; head.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">dnext</span> <span class="operator">=</span> dummy.next;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">hnext</span> <span class="operator">=</span> head.next;</span><br><span class="line">            dummy.next = hnext;</span><br><span class="line">            head.next = hnext.next;</span><br><span class="line">            hnext.next = dnext;           </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode日记(3):Java链表常用操作</title>
      <link href="/2024/06/05/Leetcode%E6%97%A5%E8%AE%B0(3)Java%E9%93%BE%E8%A1%A8%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2024/06/05/Leetcode%E6%97%A5%E8%AE%B0(3)Java%E9%93%BE%E8%A1%A8%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Java链表常用操作"><a href="#Java链表常用操作" class="headerlink" title="Java链表常用操作"></a>Java链表常用操作</h1><h2 id="创建链表"><a href="#创建链表" class="headerlink" title="创建链表"></a>创建链表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create a LinkedList</span></span><br><span class="line">LinkedList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add element</span></span><br><span class="line"><span class="comment">// Time Complexity: O(1)</span></span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br><span class="line">System.out.println(list.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Insert element</span></span><br><span class="line"><span class="comment">// Time Complexity: O(N)</span></span><br><span class="line">list.add(<span class="number">2</span>, <span class="number">99</span>);</span><br><span class="line"><span class="comment">// [1, 2, 99, 3]</span></span><br><span class="line">System.out.println(list.toString());</span><br></pre></td></tr></table></figure><h2 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Access Element</span></span><br><span class="line"><span class="comment">// Time Complexity: O(N)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">element</span> <span class="operator">=</span> list.get(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 99</span></span><br><span class="line">System.out.println(element);</span><br></pre></td></tr></table></figure><h2 id="搜索元素"><a href="#搜索元素" class="headerlink" title="搜索元素"></a>搜索元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Search element</span></span><br><span class="line"><span class="comment">// Time Complexity: O(N)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> list.indexOf(<span class="number">99</span>);</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">System.out.println(index);</span><br></pre></td></tr></table></figure><h2 id="更新元素"><a href="#更新元素" class="headerlink" title="更新元素"></a>更新元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Update element</span></span><br><span class="line"><span class="comment">// Time Complexity: O(N)</span></span><br><span class="line">list.set(<span class="number">2</span>, <span class="number">88</span>);</span><br><span class="line"><span class="comment">// [1, 2, 88, 3]</span></span><br><span class="line">System.out.println(list.toString());</span><br></pre></td></tr></table></figure><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Remove element</span></span><br><span class="line"><span class="comment">// Time Complexity: O(N)</span></span><br><span class="line">list.remove(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br><span class="line">System.out.println(list.toString());</span><br></pre></td></tr></table></figure><h2 id="链表长度"><a href="#链表长度" class="headerlink" title="链表长度"></a>链表长度</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Length</span></span><br><span class="line"><span class="comment">// Time Complexity: O(1)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> list.size();</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line">System.out.println(length);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Java链表操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode日记(1):Java数组常用操作</title>
      <link href="/2024/06/04/Leetcode%E6%97%A5%E8%AE%B0(1)Java%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2024/06/04/Leetcode%E6%97%A5%E8%AE%B0(1)Java%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Java数组常用操作"><a href="#Java数组常用操作" class="headerlink" title="Java数组常用操作"></a>Java数组常用操作</h1><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Four solution to create an array in Java</span></span><br><span class="line"><span class="comment">// Take [1, 2, 3] as example</span></span><br><span class="line"><span class="comment">// Solution 1</span></span><br><span class="line"><span class="type">int</span>[] a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">System.out.println(<span class="string">&quot;a:&quot;</span> + Arrays.toString(a));</span><br><span class="line"><span class="comment">// Solution 2</span></span><br><span class="line"><span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">System.out.println(<span class="string">&quot;b:&quot;</span> + Arrays.toString(b));</span><br><span class="line"><span class="comment">// Solution 3</span></span><br><span class="line"><span class="type">int</span>[] c = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; c.length; i++) &#123;</span><br><span class="line">    c[i] = i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;c:&quot;</span> + Arrays.toString(c));</span><br><span class="line"><span class="comment">// Solution 4</span></span><br><span class="line">ArrayList&lt;Integer&gt; arr = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    arr.add(i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;arr:&quot;</span> + arr.toString());</span><br></pre></td></tr></table></figure><h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add element </span></span><br><span class="line"><span class="comment">// Time Complexity: O(1)</span></span><br><span class="line">arr.add(<span class="number">99</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3, 99]</span></span><br><span class="line">System.out.println(<span class="string">&quot;arr:&quot;</span> + arr.toString());</span><br><span class="line"><span class="comment">// Insert element</span></span><br><span class="line"><span class="comment">// Time Complexity: O(N)</span></span><br><span class="line">arr.add(<span class="number">3</span>, <span class="number">88</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3, 88, 99]</span></span><br><span class="line">System.out.println(<span class="string">&quot;arr:&quot;</span> + arr.toString());</span><br></pre></td></tr></table></figure><h2 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h2><p>通过下标索引访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Access element</span></span><br><span class="line"><span class="comment">// Time Complexity: O(1)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">c1</span> <span class="operator">=</span> c[<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">arr1</span> <span class="operator">=</span> arr.get(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">System.out.println(<span class="string">&quot;c1:&quot;</span> + c1);</span><br><span class="line">System.out.println(<span class="string">&quot;arr1:&quot;</span> + arr1);</span><br></pre></td></tr></table></figure><h2 id="更新元素"><a href="#更新元素" class="headerlink" title="更新元素"></a>更新元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Update element</span></span><br><span class="line"><span class="comment">// Time Complexity: O(1)</span></span><br><span class="line">c[<span class="number">1</span>] = <span class="number">11</span>;</span><br><span class="line">arr.set(<span class="number">1</span>, <span class="number">11</span>);</span><br><span class="line"><span class="comment">// 2 -&gt; 11</span></span><br><span class="line">System.out.println(<span class="string">&quot;c1:&quot;</span> + c[<span class="number">1</span>]);</span><br><span class="line">System.out.println(<span class="string">&quot;arr1:&quot;</span> + arr.get(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Delete element</span></span><br><span class="line"><span class="comment">// Time Complexity: O(N)</span></span><br><span class="line">arr.remove(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// [1, 11, 3, 99]</span></span><br><span class="line">System.out.println(arr.toString());</span><br></pre></td></tr></table></figure><h2 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// The length of an array</span><br><span class="line">// Time Complexity: O(1)</span><br><span class="line">int cSize = c.length;</span><br><span class="line">int arrSize = arr.size();</span><br><span class="line">System.out.println(&quot;c length&quot; + cSize);</span><br><span class="line">System.out.println(&quot;arr length&quot; + arrSize);</span><br></pre></td></tr></table></figure><h2 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Iterate an array</span></span><br><span class="line"><span class="comment">// Iterate c</span></span><br><span class="line"><span class="comment">// Time Complexity: O(N)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; c.length; i++) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> c[i];</span><br><span class="line">    System.out.println(<span class="string">&quot;c at index &quot;</span> + i + <span class="string">&quot;: &quot;</span> + current);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Iterate arr</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.size(); i++) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> arr.get(i);</span><br><span class="line">    System.out.println(<span class="string">&quot;arr at index &quot;</span> + i + <span class="string">&quot;: &quot;</span> + current);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Find an element</span></span><br><span class="line"><span class="comment">// Find and element c</span></span><br><span class="line"><span class="comment">// Time Complexity: O(N)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; c.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (c[i] == <span class="number">99</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;We found 99 in c!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Find an element in arr</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">is99</span> <span class="operator">=</span> arr.contains(<span class="number">99</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Are we found 99 in arr?&quot;</span> + is99);</span><br></pre></td></tr></table></figure><h2 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sort an array by built-in lib</span></span><br><span class="line">c = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">arr.add(<span class="number">2</span>);</span><br><span class="line">arr.add(<span class="number">3</span>);</span><br><span class="line">arr.add(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// [2, 3, 1]</span></span><br><span class="line">System.out.println(<span class="string">&quot;c: &quot;</span> + Arrays.toString(c));</span><br><span class="line">System.out.println(<span class="string">&quot;arr: &quot;</span> + arr.toString());</span><br><span class="line"><span class="comment">// from small to big</span></span><br><span class="line"><span class="comment">// Time Complexity: O(NlogN)</span></span><br><span class="line">Arrays.sort(c);</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br><span class="line">System.out.println(<span class="string">&quot;c: &quot;</span> + Arrays.toString(c));</span><br><span class="line">Collections.sort(arr);</span><br><span class="line">System.out.println(<span class="string">&quot;arr: &quot;</span> + arr);</span><br><span class="line"><span class="comment">// From big to small</span></span><br><span class="line"><span class="comment">// Time Complexity: O(NlogN)</span></span><br><span class="line"><span class="comment">// For c, you can read an array in reverse</span></span><br><span class="line"><span class="comment">// Arrays.sort(c, Collections.reverseOrder(c));</span></span><br><span class="line"><span class="comment">// For arr</span></span><br><span class="line">Collections.sort(arr, Collections.reverseOrder());</span><br><span class="line"><span class="comment">// [3, 2, 1]</span></span><br><span class="line">System.out.println(<span class="string">&quot;arr: &quot;</span> + arr);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Java数组操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode日记(2)数组相关题485_283_27</title>
      <link href="/2024/06/04/leetcode%E6%97%A5%E8%AE%B0(2)%E6%95%B0%E7%BB%84%E7%9B%B8%E5%85%B3485_283_27/"/>
      <url>/2024/06/04/leetcode%E6%97%A5%E8%AE%B0(2)%E6%95%B0%E7%BB%84%E7%9B%B8%E5%85%B3485_283_27/</url>
      
        <content type="html"><![CDATA[<h2 id="Leetcode485"><a href="#Leetcode485" class="headerlink" title="Leetcode485"></a>Leetcode485</h2><p><img src="https://github.com/muzicoding/Img/blob/master/leetcode%E6%97%A5%E8%AE%B0/%E6%95%B0%E7%BB%84/Snipaste_2024-06-04_17-11-34.jpg?raw=true"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMaxConsecutiveOnes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxCount</span> <span class="operator">=</span> <span class="number">0</span>, count = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == <span class="number">1</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                maxCount = Math.max(maxCount, count);</span><br><span class="line">                count = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        maxCount = Math.max(maxCount, count);</span><br><span class="line">        <span class="keyword">return</span> maxCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复杂度分析</p><p>时间复杂度：O(n)，其中n是数组的长度。需要遍历数组一次。<br>空间复杂度：O(1)。</p><h2 id="Leetcode283"><a href="#Leetcode283" class="headerlink" title="Leetcode283"></a>Leetcode283</h2><p><img src="https://github.com/muzicoding/Img/blob/master/leetcode%E6%97%A5%E8%AE%B0/%E6%95%B0%E7%BB%84/Snipaste_2024-06-04_17-38-36.jpg?raw=true"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != <span class="number">0</span>) &#123;</span><br><span class="line">                nums[index] = nums[i];</span><br><span class="line">                index ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index; i &lt; nums.length; i++) &#123;</span><br><span class="line">            nums[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Leetcode27"><a href="#Leetcode27" class="headerlink" title="Leetcode27"></a>Leetcode27</h2><p><img src="https://github.com/muzicoding/Img/blob/master/leetcode%E6%97%A5%E8%AE%B0/%E6%95%B0%E7%BB%84/Snipaste_2024-06-04_17-57-14.jpg?raw=true"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != val) &#123;</span><br><span class="line">                nums[index] = nums[i];</span><br><span class="line">                index ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组会6.2低光照图像增强论文阅读</title>
      <link href="/2024/05/31/%E7%BB%84%E4%BC%9A6.2%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
      <url>/2024/05/31/%E7%BB%84%E4%BC%9A6.2%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="低光照图像增强论文阅读"><a href="#低光照图像增强论文阅读" class="headerlink" title="低光照图像增强论文阅读"></a>低光照图像增强论文阅读</h1><h2 id="Kindling-the-Darkness-A-Practical-Low-light-Image-Enhancer"><a href="#Kindling-the-Darkness-A-Practical-Low-light-Image-Enhancer" class="headerlink" title="Kindling the Darkness: A Practical Low-light Image Enhancer"></a>Kindling the Darkness: A Practical Low-light Image Enhancer</h2><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>在弱光条件下拍摄的图像通常(部分)能见度较差。除了不理想的照明，多种类型的退化，如噪声和颜色失真，由于相机的质量有限，这些退化隐藏在黑暗中。换句话说，仅仅提高黑暗区域的亮度将不可避免地放大隐藏的退化。该项工作构建了一个简单而有效的网络，该网络受 Retinex 理论的启发，将图像分解为两个组件。一个组件负责光调节（照明），而另一个用于去除退化（反射）。值得注意的是，我们的网络使用在不同曝光条件下拍摄的成对图像进行训练，而不是使用任何地面真实反射率和照明信息。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>与Retinex-Net假设类似，图像可以分解为反射率$R$和照度$L$，$I &#x3D; R◦L$。不同的是，论文认为低光照图像除了光照分量较低外，还存在图像退化（比如颜色失真，噪声），只不过退化被低光照分量掩盖了，所以不易观察。仅仅提高黑暗区域的亮度将不可避免地放大隐藏的退化，如下图所示。</p><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_11-08-46.jpg?raw=true"></p><p>因此，可对暗光图像I做如下分解。</p><p>$I&#x3D;L\circ R + E&#x3D;L\circ(R+\tilde{E})$</p><p>其中$E$为退化分量，$ \tilde{E} $为分解之后的反射分量的退化。</p><p>所以该论文进行暗光图像增强的思路是：</p><p>（1）将图像$I$合理的分解为$R$和$L$，通过调整光照分量$L$，得到合理的光照分量 $\bar{L}$ ；</p><p>（2）通过重建反射分量$R$，得到合理的反射分量 $\tilde{R} &#x3D; R - \tilde{E}$ ；</p><p>（3）图像暗光增强：$ \tilde{I} &#x3D; \tilde{L} \circ \tilde{R}$</p><p>论文采用卷积神经网络（KinD Network）来预测纠正后的光照分量和反射分量。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_14-25-34.jpg?raw=true"></p><p>网络分为：*<em>层分解网络（ <em>Layer Decomposition Net</em>），反射恢复网络（</em>Reflectance Restoration Net*），照度调整网络（ <em>Illumination Adjustment Net</em>）**。</p><p><strong>层分解网络</strong>规范了分解后的反射率对[Rl，Rh]，使其更接近（理想情况下，如果无退化，则是相同的）。此外，照明图[Ll，Lh]应该是平光滑和相互一致的。</p><p>层分解网络的损失函数构成为：</p><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_14-50-46.jpg?raw=true"></p><p>其中，包括重构误差损失：</p><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_14-56-59.jpg?raw=true"></p><p>反射相似度损失：</p><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_14-54-17.jpg?raw=true"></p><p>照明平滑度损失：</p><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_14-55-05.jpg?raw=true"></p><p>$\triangledown$代表一阶导数算子，$\epsilon$是一个很小的避免零分母的正常数（在本工作中为0.01）。该损失对于I中边缘上的位置，L上的惩罚很小；而对于I中平坦区域的位置，惩罚会很大。</p><p>相互一致损失：</p><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_14-56-23.jpg?raw=true"></p><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_15-23-14.jpg?raw=true"></p><p>损失函数如图，惩罚首先上升，但然后随着u的增加而下降到0。损失可以保证强相互边缘应保持，而弱相互边缘应降低。（这个损失的一个理解是在强化边缘信息，暗光和正常光的光照图梯度和较小或较大时表示此时的光照在平滑物体表面（分布均匀）或者边缘（光照分布差异较大），只有在梯度和不大不小时才惩罚，应该是两者一个梯度大一个梯度小的情况，也就是两个光照图有差异且差异不是特别大（因为有一个特别大也会使损失变小）的区域。）</p><p><strong>反射恢复网络</strong>损失如下：</p><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_15-41-38.jpg?raw=true"></p><p>退化在反射上的分布复杂，且强烈依赖于照明分布。因此，将光照信息和退化的反射一起引入到恢复网络中。这个操作的有效的。</p><p><strong>照明调整网络</strong>损失如下：</p><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_15-42-40.jpg?raw=true"></p><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_15-57-45.jpg?raw=true"></p><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_15-57-56.jpg?raw=true"></p><h2 id="Integrating-Semantic-Segmentation-and-Retinex-Model-for-Low-Light-Image-Enhancement"><a href="#Integrating-Semantic-Segmentation-and-Retinex-Model-for-Low-Light-Image-Enhancement" class="headerlink" title="Integrating Semantic Segmentation and Retinex Model for Low Light Image Enhancement"></a>Integrating Semantic Segmentation and Retinex Model for Low Light Image Enhancement</h2><h3 id="摘要-1"><a href="#摘要-1" class="headerlink" title="摘要"></a>摘要</h3><p>Retinex 模型被广泛应用于各种低光图像增强任务。Retinex 理论的基本思想是将图像分解为反射和照明。不适定分解通常由手工制作的约束和先验来处理。以最近出现的基于深度学习的方法为工具，本文将 Retinex 分解的思想与语义信息感知相结合。基于各种物体和背景具有不同材质、反射和透视属性的观察，单个低光图像的区域可能需要在对比度、照明和噪声方面进行不同的调整和增强。提出了一种由三部分组成的增强流程，可有效利用语义层信息。具体而言，我们提取分割、反射和照明层，并同时增强每个单独的区域，即户外场景的天空、地面和物体。在合成数据和真实世界图像上进行的大量实验证明了我们的方法优于当前最先进的低光增强算法。</p><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><p>其他基于Retinex方法的局限性：它们是用手工制作的约束条件构建的。因此，这些方法对<strong>不同类型的自然图像</strong>的复杂信号特性的捕捉都不具有足够的适应性。语义信息可以为微光增强提供丰富的信息。 例如，天空等平滑区域的噪声可以被强烈模糊，而不影响主观效果，而对于街道标识等细节丰富的区域，去噪时要小心，否则会破坏细节。然而，现有的微光增强方法忽视了语义信息的重要性，因而性能有限。基于此，论文提出了一种新的语义感知的微光增强网络，利用语义信息更好地理解场景和恢复内在反射率。</p><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_16-19-21.jpg?raw=true"></p><p>网络分为<strong>信息提取（information Extraction），反射增强（Reflectance Enhancement），照明调整（Illumination Adjustment）。</strong></p><p><strong>信息提取</strong>部分又分为<strong>分解网络（DecompNet）</strong>和<strong>语义分割网络（SegNet）</strong>。</p><p><strong>分解网络（DecompNet）</strong>用于提取反射R和照明层L，其结构和损失均参考自上篇KinD。</p><p><strong>语义分割网络（SegNet）</strong>，为了指导弱光增强，并不需要进行细粒度分类。本文只是简单地将街景分成三个部分：天空、地面和前景的物体。这三个区域通常在透视属性和反射属性上有所不同。天空通常是光滑的，而且通常与地面上的物体有不同的光源。与行车道相比，其他前景物体通常更明亮，并包含更丰富的细节。为了提取语义特征，我们采用了一个轻量级的U-Net，它强大到足以处理三类分割任务。低光图像和正光图像都用于训练SegNet。将𝑆𝐿和𝑆𝐻分别表示为𝐼𝐿和𝐼𝐻的分割估计，基本分割目标函数为</p><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_17-08-53.jpg?raw=true"></p><p>CE代表计算交叉熵损失。</p><p><strong>反射增强</strong>网络内部结构如图</p><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_16-20-08.jpg?raw=true"></p><p>其由一些 <strong>Residual In Residual (RIR)</strong> 块组成，为了引进语义信息，设计了一种变体—— Semantic Residual In Residual (SRIR) 块，语义信息通过一个线性转换（a linear transformation），来调节RL 的特征。反射增强网络的损失与上篇KinD的反射恢复网络的损失相同。</p><p><strong>照明调整</strong>由一个Unet构成。引入了比例参数ρ 来指导调整过程。对于训练，ρ 是根据ground truth 的像素均值与输入IL的像素均值之比来定义的，而在测试阶段，使用固定的ρ&#x3D; 5.0。该比例也可让用户交互提供，来控制提亮程度。损失如下：</p><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_17-17-11.jpg?raw=true"></p><h3 id="实验结果-1"><a href="#实验结果-1" class="headerlink" title="实验结果"></a>实验结果</h3><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_17-17-54.jpg?raw=true"></p><p><img src="https://github.com/muzicoding/Img/blob/master/%E7%BB%84%E4%BC%9A/6.2.%E4%BD%8E%E5%85%89%E7%85%A7%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/Snipaste_2024-05-31_17-18-33.jpg?raw=true"></p><h2 id="Pyramid-Diffusion-Models-for-Low-light-Image-Enhancement"><a href="#Pyramid-Diffusion-Models-for-Low-light-Image-Enhancement" class="headerlink" title="Pyramid Diffusion Models for Low-light Image Enhancement"></a>Pyramid Diffusion Models for Low-light Image Enhancement</h2><h3 id="主要贡献"><a href="#主要贡献" class="headerlink" title="主要贡献"></a>主要贡献</h3><p>（1）首次将Diffusion Models引入低光图像增强任务，提出PyDiff方法，相比之前的SOTA方法能恢复更好的纹理和颜色。目前在LOL benchmark上是第一名。</p><p>（2）提出了Pyramid Diffusion采样方法，可以在性能几乎无损的前提下极大加速Diffusion Models的逆过程。该方法可以与当前大多数在图像pixel space上做扩散的方法相结合，实现进一步加速。</p><p>（3）分析了将Diffusion Models应用在低光图像增强任务时会出现色差问题的原因，并提出使用一个轻量的Global Corrector解决该色差问题。</p><h3 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h3><p>diffusion models主要在t较小的时刻恢复图像纹理这种细节信息，在t较大时刻并不太关注细节的恢复。因此，在t较大的时候，我们完全可以在更小的分辨率上进行加噪去噪，然后随着t的减小，我们再慢慢上采样回原始分辨率。这样不仅可以加快网络的推理速度，还能为网络提供更大的感受野，从而更好地恢复全局信息。</p><p><img src="https://pic1.zhimg.com/v2-a8a2fd6201cbc9d28aefad53fd76624c_b.jpg"></p><p>在PyDiff之前，所有基于diffusion models的方法在单次逆过程中都是保持相同的分辨率。PyDiff采用了一种新颖的pyramid diffusion采样方法。在单次逆过程中，PyDiff逐渐从一个较小的分辨率逐渐上采样到目标图像的分辨率。从图可以看出来，使用pyramid diffusion的采样方法并不会影响最后结果的纹理细节。</p><h3 id="实验结果-2"><a href="#实验结果-2" class="headerlink" title="实验结果"></a>实验结果</h3><p>与SR3的做法一致，通过将 $x_{t}$ 和源域图像concat起来，从而实现条件的扩散。具体地，选择将输入的低光图像 $x_{low} $和其对应的直方图均衡输出 $x_{heq} $跟噪声图像$ x_{t} $concat起来输入到U-net中。结合DDIM sampler，发现PyDiff只需要4次迭代就能达到跟以往SOTA相匹敌的结果。</p><p><img src="https://pic3.zhimg.com/v2-94fa620d92e1a728585b0677af663f7a_b.jpg"></p><p><img src="https://pic4.zhimg.com/v2-8739d017e5d127b56071b4fe4e9dfc1f_b.jpg"></p><p>–该篇论文阅读内容主要摘自论文原作者知乎文章，具体参照参考引用7。</p><h2 id="参考引用："><a href="#参考引用：" class="headerlink" title="参考引用："></a>参考引用：</h2><ol><li><a href="https://cic.tju.edu.cn/faculty/zhangjiawan/Jiawan_Zhang_files/paper/yonghuazhang2019-2.pdf">Kindling the Darkness: A Practical Low-light Image Enhancer</a></li><li><a href="https://zhuanlan.zhihu.com/p/556166233">深度学习暗光图像增强（二）：（KinD）《Kindling the Darkness:A Practical Low-light Image Enhancer》</a></li><li><a href="https://blog.csdn.net/wzzzj/article/details/121733883">Kindling the Darkness: A Practical Low-light Image Enhancer论文学习</a></li><li><a href="https://mm20-semanticreti.github.io/">Integrating Semantic Segmentation and Retinex Model for Low Light Image Enhancement</a></li><li><a href="https://blog.csdn.net/weixin_45725902/article/details/115471641">论文笔记：Integrating Semantic Segmentation and Retinex Model for Low Light Image Enhancement</a></li><li><a href="https://link.zhihu.com/?target=https://www.ijcai.org/proceedings/2023/0199.pdf">Pyramid Diffusion Models for Low-light Image Enhancement</a></li><li><a href="https://zhuanlan.zhihu.com/p/656759873">知乎:[IJCAI 2023] Pyramid Diffusion Models for Low-light Image Enhancement</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 组会 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 低光照图图像增强 </tag>
            
            <tag> 论文阅读 </tag>
            
            <tag> Kindling the Darkness:A Practical Low-light Image Enhancer </tag>
            
            <tag> Integrating Semantic Segmentation and Retinex Model for Low Light Image Enhancement </tag>
            
            <tag> Pyramid Diffusion Models for Low-light Image Enhancement </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh连接macOS服务器</title>
      <link href="/2024/05/28/ssh%E8%BF%9E%E6%8E%A5macOS%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2024/05/28/ssh%E8%BF%9E%E6%8E%A5macOS%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>突发奇想想把吃灰的MacBook Pro2018 用作服务器，装上MySQL用来当数据库服务器。<br>所以要设置在同一局域网内ssh连接mac的方式。</p><p>在mac的设置中搜索“共享”，找到“高级”，“远程登录”打开就好了。<br><img src="https://github.com/muzicoding/Img/blob/master/%E9%97%AE%E9%A2%98%E6%9D%82%E8%B0%88ssh%E8%BF%9E%E6%8E%A5mac/Snipaste_2024-05-28_10-21-13.jpg?raw=true"></p><p>“远程登录”按钮右边点进去可以设置允许访问的用户和群组。<br><img src="https://github.com/muzicoding/Img/blob/master/%E9%97%AE%E9%A2%98%E6%9D%82%E8%B0%88ssh%E8%BF%9E%E6%8E%A5mac/Snipaste_2024-05-28_10-25-19.jpg?raw=true"></p><p>要远程登录在另一台电脑中输入“ssh 用户名@ip地址”，然后输入密码就好了。</p><p><img src="https://github.com/muzicoding/Img/blob/master/%E9%97%AE%E9%A2%98%E6%9D%82%E8%B0%88ssh%E8%BF%9E%E6%8E%A5mac/483C5B4616221D8FF6EDA31B78F3424D.jpg?raw=true"></p><p>PS：配置好mac数据库，用另一台电脑测试数据库连接时，发现mac的防火墙竟然是默认关闭。</p>]]></content>
      
      
      <categories>
          
          <category> 问题杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/05/26/hello-world/"/>
      <url>/2024/05/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p>一个敲代码的人</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
